#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 24, 2018 08:57:26 PM IST  platform: Linux

import sys

try:
    import tkinter as tk
    from tkinter import filedialog
    import tkinter.messagebox as msg
    from tkinter import font
    from tkinter import ttk
    PhotoImage = tk.PhotoImage
    py3 = True

except ImportError:
    # Python 2
    import Tkinter as tk
    import tkFileDialog as filedialog
    import tkMessageBox as msg
    import ttk
    import tkFont as font
    from PIL import Image, ImageTk 
    PhotoImage = ImageTk.PhotoImage
    py3 = False

import re
import os
from subprocess import Popen, PIPE, STDOUT
from functools import partial
import sys
import traceback
import glob
import configparser as cp
import ntpath
import pageEditor_support
import os.path
import pickle
import csv

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    pageEditor_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    pageEditor_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None): 
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        #####################################################################
        # save geometry on exit
        self.top = top
        self.ini_file_path = "mapedit.ini"
        try:
            # if the file is there
            # get geometry from file 
            self.ini_file = open(self.ini_file_path,'r')
            self.top.geometry(self.ini_file.read())
            self.ini_file.close()
        except:
            # if the file is not there, create the file and use default
            # then use default geometry.
            self.ini_file = open(self.ini_file_path, 'w')
            self.ini_file.close()
            self.top.geometry("640x480+100+200")
        #####################################################################
        # end save geometry on exit
        self.top.title("Import Tool")
        self.top.configure(highlightcolor="black")
        # working in save geometry
        self.top.protocol('WM_DELETE_WINDOW', self.exit_command)
        # to use file_open funtion in two ways
        self.direct_access = False

        # copied from func_name_extract.py
        self.type_list = ['int', 'char', 'float', 'double', 'bool', 'void', 'short', 'long', 'signed', 'struct']
        self.re_removed = "(\'.*\')|(\".*\")|(/\*.*\*/)|(//.*)"
        self.keyword_set = set(self.type_list + ['sizeof'])
        self.style.configure('TSizegrip', background=_bgcolor)
        self.TSizegrip1 = ttk.Sizegrip(top)
        self.TSizegrip1.place(anchor='se', relx=1.0, rely=1.0)

        self.TPanedwindow1 = ttk.Panedwindow(top, orient="horizontal")
        self.TPanedwindow1.place(relx=0.0, rely=0.0, relheight=0.96
                , relwidth=0.993)
        self.TPanedwindow1.configure(width=600)
        self.TPanedwindow1_p1 = ttk.Labelframe(width=90, text='FilePane')
        self.TPanedwindow1.add(self.TPanedwindow1_p1)
        self.TPanedwindow1_p2 = ttk.Labelframe(width=90, text='FuntionPane')
        self.TPanedwindow1.add(self.TPanedwindow1_p2)
        self.TPanedwindow1_p3 = ttk.Labelframe(width=400,text='EditorPane')
        self.TPanedwindow1.add(self.TPanedwindow1_p3)
        self.TPanedwindow1_p4 = ttk.Labelframe(width=90,text='ResultFilePane')
        self.TPanedwindow1.add(self.TPanedwindow1_p4)
        self.__funcid0 = self.TPanedwindow1.bind('<Map>', self.__adjust_sash0)

        self.input_file_list_box = ScrolledListBox(self.TPanedwindow1_p1)
        self.input_file_list_box.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0, bordermode='ignore')
        self.input_file_list_box.configure(background="white")
        self.input_file_list_box.configure(font="TkFixedFont")
        self.input_file_list_box.configure(highlightcolor="#d9d9d9")
        self.input_file_list_box.configure(selectbackground="#c4c4c4")
        self.input_file_list_box.configure(width=10)
        self.input_file_list_box.bind("<<ListboxSelect>>", self.file_open)

        self.func_list_box = ScrolledListBox(self.TPanedwindow1_p2)
        self.func_list_box.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0, bordermode='ignore')
        self.func_list_box.configure(background="white")
        self.func_list_box.configure(font="TkFixedFont")
        self.func_list_box.configure(highlightcolor="#d9d9d9")
        self.func_list_box.configure(selectbackground="#c4c4c4")
        # self.func_list_box.configure(width=10)
        self.func_list_box.bind("<<ListboxSelect>>", self.func_open)

        self.main_text = ScrolledText(self.TPanedwindow1_p3)
        self.main_text.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0
                , bordermode='ignore')
        self.main_text.configure(background="white")
        self.main_text.configure(font="TkTextFont")
        self.main_text.configure(insertborderwidth="3")
        self.main_text.configure(selectbackground="#c4c4c4")
        # self.main_text.configure(width=20)
        self.main_text.configure(wrap='word')
        self.main_text.configure(undo=True)
        self.main_text.bind('<Button-3>', self.show_popup_menu)
        self.main_text.focus_set()

        self.OutPaneScrollbox = ScrolledListBox(self.TPanedwindow1_p4)
        self.OutPaneScrollbox.place(relx=0.0, rely=0.0, relheight=1.0
                , relwidth=1.0, bordermode='ignore')
        self.OutPaneScrollbox.configure(background="white")
        self.OutPaneScrollbox.configure(font="TkFixedFont")
        self.OutPaneScrollbox.configure(highlightcolor="#d9d9d9")
        self.OutPaneScrollbox.configure(selectbackground="#c4c4c4")
        # self.OutPaneScrollbox.configure(width=10)

        # Infobar
        self.infobar = tk.Label(self.top)
        self.infobar.configure(text='No File Open')
        self.infobar.pack(expand=1, fill=tk.X, padx=(0,0), side=tk.LEFT, anchor='sw')

        # Linebar
        self.Linebar = tk.Label(self.top)
        self.Linebar.configure(text='Line: 1 | Column:0')
        self.Linebar.pack(expand=tk.NO, fill=None, padx=(0,15), side=tk.RIGHT, anchor='sw')

        #######################
        ### Pop up menu on left click
        # set up the pop-up menu
        self.popup_menu = tk.Menu(self.main_text, tearoff=0)
        for i in ('cut', 'copy', 'paste', 'undo', 'redo'):
            cmd = 'self.edit_' + i
            cmd = eval(cmd)
            self.popup_menu.add_command(label=i, compound='right', command=cmd)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        self.top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="File Options")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Open Folder",
                command=self.folder_open)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Open File",
                command = self.file_open)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="NewCommand")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="NewCommand")
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Editor Options")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Cut",
                command=self.edit_cut)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Copy",
                command=self.edit_copy)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Paste",
                command=self.edit_paste)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Undo",
                command=self.edit_undo)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Redo",
                command=self.edit_redo)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Select All"
                )
        self.sub_menu12 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Output Options")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Save")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Save As")

    def __adjust_sash0(self, event):
        paned = event.widget
        pos = [130, 470, ]
        i = 0
        for sash in pos:
            paned.sashpos(i, sash)
            i += 1
        paned.unbind('<map>', self.__funcid0)
        del self.__funcid0

    def file_open(self, event=None):
        if self.direct_access:
            self.file_to_open = self.input_file_list_box.get(self.input_file_list_box.curselection())
            self.file_to_open = self.file_list[self.file_to_open]
        else:
            self.file_to_open = filedialog.askopenfilename()

        if self.file_to_open:
            self.open_file = self.file_to_open
            self.main_text.delete(1.0, tk.END)
            self.infobar.configure(text=self.file_to_open)
            with open(self.file_to_open, "r") as file_contents:
                file_lines = file_contents.readlines()
                if len(file_lines) > 0:
                    for index, line in enumerate(file_lines):
                        index = float(index) + 1.0
                        self.main_text.insert(index, line)
            self.func_name_extract(self.file_to_open)

    def edit_cut(self, event=None):
        self.main_text.event_generate("<<Cut>>")
        return "break"

    def edit_copy():
        self.main_text.event_generate("<<Copy>>")
        return "break"

    def edit_paste(self, event=None):
        self.main_text.event_generate("<<Paste>>")
        # self.on_key_release(self)
        # self.tag_all_lines()

        return "break"

    def edit_undo(self, event=None):
        self.main_text.event_generate("<<Undo>>")

        return "break"

    def edit_redo(self, event=None):
        self.main_text.event_generate("<<Redo>>")

        return "break"


    def clear_left_frame(self):
        for child in self.input_file_list_box.winfo_children():
            child.destroy()

    def folder_open(self,event=None):
        folder_selected = filedialog.askdirectory()
        if not folder_selected:
            pass
        else:
            func_list = self.file_name_extract_folder(folder_selected)
            self.direct_access = True

    def file_name_extract_folder(self, work_folder):
        func_list_all = []
        valid_ext = [".c",".h"]
        self.file_list = {}
        self.main_text.delete(1.0, tk.END)
        self.input_file_list_box.delete(0, tk.END)
        for dirpath, dirnames, filenames in os.walk(work_folder):
            for name in filenames:
                for ext in valid_ext:
                    if name.endswith(ext):
                        self.input_file_list_box.insert(0, name)
                        file_path = os.path.join(dirpath, name)
                        self.file_list[name] = file_path
        return func_list_all

    def func_open(self, event=None):
        pass

    ###################################
    # PopUp menu
    def show_popup_menu(self, event):
        self.popup_menu.tk_popup(event.x_root, event.y_root)

    def pickle_dump(self,root_path, data, file_name):
        os.chdir(root_path)
        fp = open(file_name, "w")
        pickle.dump(data, fp)
        fp.close()

    def pickle_load(self,root_path, file_name):
        os.chdir(root_path)
        fp_case = open(file_name, "r")
        dict_case = pickle.load(fp_case)
        fp_case.close()
        return dict_case


    def is_valid_name(self,name):
        if re.match("[a-zA-Z_][a-zA-Z0-9_]*", name) == None:
            return False
        if name in self.keyword_set:
            return False
        return True

    def is_func(self,line):
    #int, __int64, void, char*, char *, struct Node, long long int, (void *)
    #int func(int a, int *b, (char *) c)
        line = line.strip()
        if len(line) < 2:
            return None
    # Rule 1: assume the function name line must ends with ) or {;
    #    if line[-1] != ')' and line[-1] != '{':
    #        return None
    # Rule 2: (*) must in
        if '(' not in line: #or ')' not in line:
            return None
    # Rule 3: # stands for #include or other primitives; / start a comment
        if line[0] == '#' or line[0] == '/':
            return None
    # Rule 4: ends with ;
        if line.endswith(';'):
            return None
        if line.startswith('static'):
            line = line[len('static'):]
    # replace pointer * and & as space
        line = re.sub('\*', ' ', line)
        line = re.sub('\&', ' ', line)


    # replace '(' as ' ('
        #re.sub('(', ' ( ', line)
        line = re.sub('\(', ' \( ', line)
        line_split = line.split()

        if len(line_split) < 2:
            return None

        bracket_num = 0
        for ch in line:
            if ch == '(':
                bracket_num += 1

        has_type = False
        for type_a in self.type_list:
            if type_a in line_split[0]:
                has_type = True
    #    if has_type == False:
    #        return None
    #    print line
        if bracket_num == 1:
            for index in xrange(len(line_split)):
                if '(' in line_split[index]:
                    return line_split[index - 1]
        else:
            line = re.sub('\(', ' ', line)
            line = re.sub('\)', ' ', line)
            line_split = line.split()
            index = 0
            for one in line_split:
                if is_valid_name(one):
                    index += 1
                    if index == 2:
                        return one
            return None

    def get_line_type(self,line):
        line = line.strip()
        if line.startswith("/*"):
    #        print line
            return "comment_paragraph"
        elif line.startswith("//"):
            return "comment_line"
        elif line.startswith("#"):
            return "macro"
        return "other"

    #def is_comment_begin(line):
    #    if line.startswith("/*"):
    #        return True
    #    return False

    def is_comment_end(self,line):
        #print line
        line = line.strip()
        if line.endswith('*/'):
            return True
        return False

    def is_func_end(self,line, left_brack_num):
        line = line.strip()
        left_brack_num += line.count("{")
        if "}" in line:
            left_brack_num -= line.count("}")
            if left_brack_num == 0:
                return True
        return False

    def func_name_extract(self,file_path):

        if not os.path.isfile(file_path):
            return

        inline = []
        file_list = []
        self.func_list_box.delete(0, tk.END)
        with open(file_path, "r") as fp:
            for line in fp.readlines():
                file_list.append(line)

        func_list = []

        i = -1
        while i < len(file_list) - 1:
            i += 1
            line = file_list[i]
            docstring = ""
            line_type = self.get_line_type(line)
            if line_type == "comment_line" or line_type == "macro":
                continue
            elif line_type == "comment_paragraph":
                while not self.is_comment_end(file_list[i]):
                    docstring += file_list[i]
                    i += 1
                # print docstring
            else:
                line = re.sub(self.re_removed, "", line)
                if len(line) == 0:
                    continue
                func_name = self.is_func(line)
                if func_name != None:
    #                print i, func_name
                    start_line = i
                    left_brack_num = 0
                    effective_line = 1
                    line = (file_list[i]).strip()
                    if not ";" in line: #function calling is not there
                        self.func_list_box.insert(0,func_name)
                        docstring = "/********************\n"
                        docstring += "//FUNTION:{}\n".format(line)
                        docstring += "*******************/\n"
                        # print docstring
                    while True and i < len(file_list):
    #                    print i
    #                    print line
                        line = (file_list[i]).strip()
                        inline.append(line)
                        # line_type = get_line_type(line)
                        # if line_type == "comment_line":
                        #     continue

    #                    elif line_type == "comment_paragraph":
    #                        continue
    #                        while not is_comment_end(file_list[i]):
    #                            i += 1
                        left_brack_num += line.count('{')
                        effective_line += 1
                        if "}" in line:
                            left_brack_num -= line.count("}")
                            if left_brack_num < 1:
                                break
    #                    print left_brack_num
                        i += 1
                    end_line = i
                   # if func_name != None:
                    func_list.append([file_path, func_name, start_line + 1, end_line + 1, end_line - start_line + 1])
    #                print func_name
                    with open(".list", "w") as out_file:
                        csv_write = csv.writer(out_file)
                        csv_write.writerow([docstring])
                        for one in inline:
                            csv_write.writerow([one])  
        return func_list

    def exit_command(self, event=None):
        if msg.askokcancel("Quit", "Do you really want to quit?"):
            self.save_geo()
            self.top.destroy()

    def save_geo(self):
        # save current geometry to the ini file 
        try:
            with open("mapedit.ini", 'w') as ini_file:
                ini_file.write(self.top.geometry())
                self.infobar['text']="geo saved"
                ini_file.close()
        except:
            self.infobar['text']="ini file not found"

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()





